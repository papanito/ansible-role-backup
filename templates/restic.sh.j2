#!/bin/sh

# Setting this, so the repo does not need to be given on the commandline:

export RESTIC_REPOSITORY={{ target_location }}/{{ backup_name }}

# Setting this, so you won't be asked for your repository passphrase:
export RESTIC_PASSWORD='{{ backup_borg_encryption_key }}'

{% if aws_access_key_id is defined %}
export AWS_ACCESS_KEY_ID={{ aws_access_key_id }}
{% endif %}
{% if aws_default_region is defined %}
export AWS_DEFAULT_REGION={{ aws_default_region }}
{% endif %}
{% if aws_secret_access_key is defined %}
export AWS_SECRET_ACCESS_KEY={{ aws_secret_access_key }}
{% endif %}
{% if azure_account_key is defined %}
export AZURE_ACCOUNT_KEY={{ azure_account_key }}
{% endif %}
{% if azure_account_name is defined %}
export AZURE_ACCOUNT_NAME={{ azure_account_name }}
{% endif %}
{% if b2_account_id is defined %}
export B2_ACCOUNT_ID={{ b2_account_id }}
{% endif %}
{% if b2_account_key is defined %}
export B2_ACCOUNT_KEY={{ b2_account_key }}
{% endif %}
{% if google_application_credentials is defined %}
export GOOGLE_APPLICATION_CREDENTIALS={{ google_application_credentials }}
{% endif %}
{% if google_project_id is defined %}
export GOOGLE_PROJECT_ID={{ google_project_id }}
{% endif %}
{% if os_application_credential_id is defined %}
export OS_APPLICATION_CREDENTIAL_ID={{ os_application_credential_id }}
{% endif %}
{% if os_application_credential_name is defined %}
export OS_APPLICATION_CREDENTIAL_NAME={{ os_application_credential_name }}
{% endif %}
{% if os_application_credential_secret is defined %}
export OS_APPLICATION_CREDENTIAL_SECRET={{ os_application_credential_secret }}
{% endif %}
{% if os_auth_token is defined %}
export OS_AUTH_TOKEN={{ os_auth_token }}
{% endif %}
{% if os_auth_url is defined %}
export OS_AUTH_URL={{ os_auth_url }}
{% endif %}
{% if os_password is defined %}
export OS_PASSWORD={{ os_password }}
{% endif %}
{% if os_project_domain_id is defined %}
export OS_PROJECT_DOMAIN_ID={{ os_project_domain_id }}
{% endif %}
{% if os_project_domain_name is defined %}
export OS_PROJECT_DOMAIN_NAME={{ os_project_domain_name }}
{% endif %}
{% if os_project_name is defined %}
export OS_PROJECT_NAME={{ os_project_name }}
{% endif %}
{% if os_region_name is defined %}
export OS_REGION_NAME={{ os_region_name }}
{% endif %}
{% if os_storage_url is defined %}
export OS_STORAGE_URL={{ os_storage_url }}
{% endif %}
{% if os_trust_id is defined %}
export OS_TRUST_ID={{ os_trust_id }}
{% endif %}
{% if os_tenant_name is defined %}
export OS_TENANT_NAME={{ os_tenant_name }}
{% endif %}
{% if os_user_domain_id is defined %}
export OS_USER_DOMAIN_ID={{ os_user_domain_id }}
{% endif %}
{% if os_user_domain_name is defined %}
export OS_USER_DOMAIN_NAME={{ os_user_domain_name }}
{% endif %}
{% if os_user_id is defined %}
export OS_USER_ID={{ os_user_id }}
{% endif %}
{% if os_username is defined %}
export OS_USERNAME={{ os_username }}
{% endif %}
{% if st_auth is defined %}
export ST_AUTH={{ st_auth }}
{% endif %}
{% if st_key is defined %}
export ST_KEY={{ st_key }}
{% endif %}
{% if st_user is defined %}
export ST_USER={{ st_user }}
{% endif %}

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup"

# Backup the most important directories into an archive named after
# the machine this script is currently running on:

restic -r {{ target_location }}/{{ backup_name }} \
    backup {% for backup_source_dir in backup_include_list %} {{ backup_source_dir }} {% endfor %} \
    --verbose \
    --exclude-caches \
{% if backup_exclude_file is defined %}
    --exclude-file {{ backup_exclude_file }} \
{% elif backup_exclude_list is defined %}
{% for exclude in backup_exclude_list %}
    --exclude '{{ exclude }}' \
{% endfor %}
{% endif %}
{% if backup_exclude_larger_than is defined %}
    --exclude-larger-than {{ backup_exclude_larger_than }}
{% endif %}

backup_exit=$?

info "Pruning repository"

restic -r {{ target_location }}/{{ backup_name }} forget \
    --prune \
{% if backup_prune_keep_within is defined %}
    --keep-within {{ backup_prune_keep_within }} \
{% endif %}
{% if backup_prune_keep_last is defined %}
    --keep-last {{ backup_prune_keep_last }} \
{% endif %}
{% if backup_prune_keep_minutely is defined %}
    --keep-minutely {{ backup_prune_keep_minutely }} \
{% endif %}
{% if backup_prune_keep_hourly is defined %}
    --keep-hourly {{ backup_prune_keep_hourly }} \
{% endif %}
{% if backup_prune_keep_daily is defined %}
    --keep-daily {{ backup_prune_keep_daily }} \
{% endif %}
{% if backup_prune_keep_weekly is defined %}
    --keep-weekly {{ backup_prune_keep_weekly }} \
{% endif %}
{% if backup_prune_keep_monthly is defined %}
    --keep-monthly {{ backup_prune_keep_monthly }} \
{% endif %}
{% if backup_prune_keep_yearly is defined %}
    --keep-yearly {{ backup_prune_keep_yearly }} \
{% endif %}
{% if backup_prune_keep_within_hourly is defined %}
    --keep-yearly {{ backup_prune_keep_within_hourly }} \
{% endif %}
{% if backup_prune_keep_within_daily is defined %}
    --keep-yearly {{ backup_prune_keep_within_daily }} \
{% endif %}
{% if backup_prune_keep_within_weekly is defined %}
    --keep-yearly {{ backup_prune_keep_within_weekly }} \
{% endif %}
{% if backup_prune_keep_within_monthly is defined %}
    --keep-yearly {{ backup_prune_keep_within_monthly }} \
{% endif %}
{% if backup_prune_keep_within_yearly is defined %}
    --keep-yearly {{ backup_prune_keep_within_yearly }} \
{% endif %}

prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 0 ]; then
    info "Backup and Prune finished successfully"
elif [ ${global_exit} -eq 1 ]; then
    info "Backup and/or Prune finished with warnings"
else
    info "Backup and/or Prune finished with errors"
fi

exit ${global_exit}
